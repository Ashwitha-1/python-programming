from tensorflow import keras
import matplotlib.pyplot as plt
from sklearn.metrics import accuracy_score,confusion_matrix,classification_report
import numpy as np
import cv2
(x_train, y_train), (x_test, y_test) = keras.datasets.cifar10.load_data()
x_train.shape,x_test.shape
# Normalization
x_train = x_train/255.0
x_test = x_test/255.0
#sklearn expects i/p to be 2d array-model.fit(x_train,y_train)=>reshape to 2d array
nsamples, nx, ny, nrgb = x_train.shape
x_train2 = x_train.reshape((nsamples,nx*ny*nrgb))
#so,eventually,model.predict() should also be a 2d input
nsamples, nx, ny, nrgb = x_test.shape
x_test2 = x_test.reshape((nsamples,nx*ny*nrgb))
from sklearn.ensemble import RandomForestClassifier
model=RandomForestClassifier()
model.fit(x_train2,y_train)
y_pred=model.predict(x_test2)
y_pred
accuracy_score(y_pred,y_test)
print(classification_report(y_pred,y_test))
confusion_matrix(y_pred,y_test)
from sklearn.neighbors import KNeighborsClassifier
knn=KNeighborsClassifier(n_neighbors=7)
knn.fit(x_train2,y_train)
y_pred_knn=knn.predict(x_test2)
y_pred_knn
accuracy_score(y_pred_knn,y_test)
print(classification_report(y_pred_knn,y_test))
confusion_matrix(y_pred_knn,y_test)
from sklearn.tree import DecisionTreeClassifier
dtc=DecisionTreeClassifier()
dtc.fit(x_train2,y_train)
y_pred_dtc=dtc.predict(x_test2)
y_pred_dtc
accuracy_score(y_pred_dtc,y_test)
print(classification_report(y_pred_dtc,y_test))
confusion_matrix(y_pred_dtc,y_test)
from sklearn.naive_bayes import GaussianNB
nb=GaussianNB()
nb.fit(x_train2,y_train)
y_pred_nb=nb.predict(x_test2)
y_pred_nb
accuracy_score(y_pred_nb,y_test)
print(classification_report(y_pred_nb,y_test))
accuracy_score(y_pred_nb,y_test)
print(classification_report(y_pred_nb,y_test))
img_path='/content/bird.jfif'
img_arr=cv2.imread(img_path)
img_arr=cv2.resize(img_arr,(32,32))
#so,eventually,model.predict() should also be a 2d input
nx, ny, nrgb = img_arr.shape
img_arr2 = img_arr.reshape(1,(nx*ny*nrgb))
classes = ["airplane","automobile","bird","cat","deer","dog","frog","horse","ship","truck"]
ans=model.predict(img_arr2)
print(classes[ans[0]])
#RandomForestClassifier
